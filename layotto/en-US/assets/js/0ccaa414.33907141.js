"use strict";(self.webpackChunklayotto_docusaurus=self.webpackChunklayotto_docusaurus||[]).push([[3324],{4796:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>l,contentTitle:()=>a,default:()=>h,frontMatter:()=>s,metadata:()=>o,toc:()=>c});var i=t(4848),r=t(8453);const s={},a="Actuator Design Document",o={id:"design/actuator/actuator-design-doc",title:"Actuator Design Document",description:"Requirements",source:"@site/i18n/en-US/docusaurus-plugin-content-docs/current/design/actuator/actuator-design-doc.md",sourceDirName:"design/actuator",slug:"/design/actuator/actuator-design-doc",permalink:"/en-US/docs/design/actuator/actuator-design-doc",draft:!1,unlisted:!1,editUrl:"https://github.com/mosn/layotto/edit/main/design/actuator/actuator-design-doc.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Dynamically configure the sending, component heated reload",permalink:"/en-US/docs/design/lifecycle/apply_configuration"},next:{title:"MOSN gRPC framework design document",permalink:"/en-US/docs/design/actuator/grpc-design-doc"}},l={},c=[{value:"Requirements",id:"requirements",level:2},{value:"Explanation",id:"explanation",level:2},{value:"Overall programme",id:"overall-programme",level:2},{value:"Http API Design",id:"http-api-design",level:2},{value:"Pathways interpretation",id:"pathways-interpretation",level:3},{value:"Health Endpoint",id:"health-endpoint",level:3},{value:"/actuator/health/livelihood",id:"actuatorhealthlivelihood",level:4},{value:"/actuator/health/readiness",id:"actuatorhealthreadiness",level:4},{value:"Info Endpoint",id:"info-endpoint",level:3},{value:"/actuator/info",id:"actuatorinfo",level:4},{value:"Data model for configuration of data",id:"data-model-for-configuration-of-data",level:2},{value:"Internal structure and request processing process",id:"internal-structure-and-request-processing-process",level:2},{value:"Request arrived at mosn, enter Layotto via stream filter and call actuator",id:"request-arrived-at-mosn-enter-layotto-via-stream-filter-and-call-actuator",level:3},{value:"Request for distribution to End point within Actuator",id:"request-for-distribution-to-end-point-within-actuator",level:3},{value:"Health.Endpoint requests for distribution to health.Indicator",id:"healthendpoint-requests-for-distribution-to-healthindicator",level:3},{value:"Info.Endpoint requests for distribution to info.Contributor",id:"infoendpoint-requests-for-distribution-to-infocontributor",level:3},{value:"Scene design",id:"scene-design",level:2},{value:"runtime_startup",id:"runtime_startup",level:3},{value:"Apollo components",id:"apollo-components",level:3}];function d(e){const n={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",img:"img",li:"li",ol:"ol",p:"p",pre:"pre",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.h1,{id:"actuator-design-document",children:"Actuator Design Document"}),"\n",(0,i.jsx)(n.h1,{id:"product-design",children:"Product design"}),"\n",(0,i.jsx)(n.h2,{id:"requirements",children:"Requirements"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Health Check"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Use the actuator interface to access health status of all internal Layotto components and business applications uniformly"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"View running metadata"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Access to Layotto its own metadata information (e.g. version, git information) and to the metadata information for business applications (e.g. a list of configuration items subscribed to by the Configuration Centre, such as app version information) can be obtained uniformly via the actuator interface."}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["Supporting integrated and open source infrastructure, including\uff1a","\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Can integrate into k8s health check"}),"\n",(0,i.jsx)(n.li,{children:"Can be integrated into monitoring systems, such as Prometheus+Grafana"}),"\n",(0,i.jsx)(n.li,{children:"If necessary, the registration centre may remove the node based on the results of the health check"}),"\n",(0,i.jsx)(n.li,{children:"This interface can be used as the dashboard project or GUI tool to list problems."}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.li,{children:"Similar to Spring Boot Actuator, more imaginary space\uff1aMonitoring, Metrics, Auditing, and more."}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"explanation",children:"Explanation"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: What values?Who is using the health check interface opened?"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For developing troubleshooting, direct interfaces to query runtime information, or a dashboard page/GUI tool"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"For monitoring system monitoring;"}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:"Automated shipping for infrastructure, such as deploying systems based on health checks to judge deployment progress, stop or continue to deploy in batchs; e.g. registration centres remove abnormal nodes based on health check-ups; e.g. k8s recreate containers based on health check-ups"}),"\n"]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: It looks like returning a status code is running, there is no need to return running information?Who will find detailed information on the run?"})}),"\n",(0,i.jsxs)(n.ol,{children:["\n",(0,i.jsx)(n.li,{children:"This interface can be used as a dashboard page or GUI tool for troubleshooting questions;"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to the spring boot community wrote a spring boot admin page\nfor reference [",(0,i.jsx)(n.a,{href:"https://segmentfault.com/a/1190000017816452%5D(",children:"https://segmentfault.com/a/1190000017816452]("}),(0,i.jsx)(n.a,{href:"https://segmentfault.com/a/1190000017816452",children:"https://segmentfault.com/a/1190000017816452"}),"](",(0,i.jsx)(n.a,{href:"https://segmentfault.com/a/1190000017816452",children:"https://segmentfault.com/a/1190000017816452"}),")."]}),"\n",(0,i.jsxs)(n.ol,{start:"2",children:["\n",(0,i.jsx)(n.li,{children:"Integrated Monitoring System: Access to Prometheus+Grafana"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Similar to Spring Boot Actuator's access to Prometheus+Grafana\nreference",(0,i.jsx)(n.a,{href:"https://bigjar.github.io/2018/08/19/Spring-Boot-Metrics%E7%9B%91%E6%8E%A7%E4%B9%8BPrometheus-Grafana/",children:"Spring-Boot-Metrics\u76d1\u63a7\u4e4bPrometheus-Grafana"})]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:'Q: Do not control capabilities like "toggle the traffic of specific components inside Layotto"'})}),"\n",(0,i.jsx)(n.p,{children:"A: No, switching parts will leave the app in partial failure, with uncertainty.\nBut follow-up could consider adding debug capabilities such as mock, packets, etc."}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: Health check interface does not allow permission control"})}),"\n",(0,i.jsx)(n.p,{children:"A: Do not get started with feedback needs plus hook"}),"\n",(0,i.jsx)(n.h1,{id:"overview-design",children:"Overview design"}),"\n",(0,i.jsx)(n.h2,{id:"overall-programme",children:"Overall programme"}),"\n",(0,i.jsx)(n.p,{children:"Open the http's interface first, because the health screening function of open source infrastructure basically supports https (e.g. k8s, prometheus) and does not support grpc."}),"\n",(0,i.jsx)(n.p,{children:"In order to be able to reuse filters such as MOSN authentication, Actuator will run on MOSN as a seven-storey filter."}),"\n",(0,i.jsx)(n.p,{children:"Specifically, MOSN adds a listener, writing a new stream_filter, which is responsible for http's request processing and calling the Actuator."}),"\n",(0,i.jsx)(n.p,{children:"The Endpoint concept is abstracted within the actuator, and when a new request arrives on the server, the Actuator will commission the corresponding endpoint.Endpoint supports the extension and injection of actuator\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(4273).A+"",width:"275",height:"428"})}),"\n",(0,i.jsx)(n.h2,{id:"http-api-design",children:"Http API Design"}),"\n",(0,i.jsx)(n.h3,{id:"pathways-interpretation",children:"Pathways interpretation"}),"\n",(0,i.jsx)(n.p,{children:"Path is restul style. After different Endpoint is registered in actuator, the path is"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/actuator/{endpoint_name}/{params}  \n"})}),"\n",(0,i.jsx)(n.p,{children:"like"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/actuator/health/livelihood\n"})}),"\n",(0,i.jsx)(n.p,{children:"The name of the health flag endpoint is health,liveness is the parameter passed to the endpoint."}),"\n",(0,i.jsx)(n.p,{children:"Parameters are supported for multiple passes, such as /a/b/c/d, and the semicolon is defined by each endpoint itself"}),"\n",(0,i.jsx)(n.p,{children:"Default registered path is\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{children:"/actuator/health/liveness\n/actuator/health/readability\n/actuator/info\n"})}),"\n",(0,i.jsx)(n.h3,{id:"health-endpoint",children:"Health Endpoint"}),"\n",(0,i.jsx)(n.h4,{id:"actuatorhealthlivelihood",children:"/actuator/health/livelihood"}),"\n",(0,i.jsx)(n.p,{children:"GET"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// http://localhost:8080/actuator/health/liveness\n// HTTP/1.1 200 OK\n\n{\n  "status": "UP",\n  "components": {\n    "livenessProbe": {\n      "status": "UP",\n      "details":{\n\t\t\t\t \n      }\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:"Returns field description\uff1a\nHTTP status code 200 for successes, others (over 400) failed\nstatus field with cascade\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:'var (\n\t// INIT means it is starting\n\tINIT = Status("INIT")\n\t// UP means it is healthy\n\tUP = Status("UP")\n\t// DOWN means it is unhealthy\n\tDOWN = Status("DOWN")\n)\n'})}),"\n",(0,i.jsx)(n.h4,{id:"actuatorhealthreadiness",children:"/actuator/health/readiness"}),"\n",(0,i.jsx)(n.p,{children:"GET"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// http://localhost:8080/actuator/health/readness\n//HTTP/1. 503 SERVICE UNAVAILABLE\n\nLO\n  "status": "DOWN",\n  "components": LO\n    "readinessProbe": LO\n      "status": "DOWN"\n    }\n  }\n}\n'})}),"\n",(0,i.jsx)(n.h3,{id:"info-endpoint",children:"Info Endpoint"}),"\n",(0,i.jsx)(n.h4,{id:"actuatorinfo",children:"/actuator/info"}),"\n",(0,i.jsx)(n.p,{children:"GET"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-json",children:'// http://localhost:8080/actuator/health/liveness\n// HTTP/1.1200 OK\n\nLO\n    "app" : LO\n        "version" : "1.0.0",\n        "name" : "Layotto"\n    }\n}\n'})}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: What is running time metadata?"})}),"\n",(0,i.jsx)(n.p,{children:"Junk\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Version number"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"You can add\uff1a"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"Callback app"}),"\n",(0,i.jsx)(n.li,{children:"Runtime config parameter"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.strong,{children:"Q: Are components required to perform health check interfaces?"})}),"\n",(0,i.jsx)(n.p,{children:"Don't force for now"}),"\n",(0,i.jsx)(n.h2,{id:"data-model-for-configuration-of-data",children:"Data model for configuration of data"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(9869).A+"",width:"794",height:"1103"})}),"\n",(0,i.jsx)(n.p,{children:"Add a listener to handle actuator,stream_filters adding actuator_filter, to handle actuators' requests (see below)"}),"\n",(0,i.jsx)(n.h2,{id:"internal-structure-and-request-processing-process",children:"Internal structure and request processing process"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(9216).A+"",width:"1064",height:"438"})}),"\n",(0,i.jsx)(n.p,{children:"Explanation\uff1a"}),"\n",(0,i.jsx)(n.h3,{id:"request-arrived-at-mosn-enter-layotto-via-stream-filter-and-call-actuator",children:"Request arrived at mosn, enter Layotto via stream filter and call actuator"}),"\n",(0,i.jsx)(n.p,{children:"Stream filter implementation class is DispatchFilter, responsible for distributing requests and calling actuator along the http's path:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"\ntype DispatchFilter struct {\n\thandler api.StreamReceiverFilterHandler\n}\n\nfunc (dis *DispatchFilter) SetReceiveFilterHandler(handler api.StreamReceiverFilterHandler) {\n\tdis.handler = handler\n}\n\nfunc (dis *DispatchFilter) OnDestroy() {}\n\nfunc (dis *DispatchFilter) OnReceive(ctx context.Context, headers api.HeaderMap, buf buffer.IoBuffer, trailers api.HeaderMap) api.StreamFilterStatus {\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"The protocol layer and actuator decouple coupling. If interfaces from other protocols are required in the future, the protocol will be implemented with stream."}),"\n",(0,i.jsx)(n.h3,{id:"request-for-distribution-to-end-point-within-actuator",children:"Request for distribution to End point within Actuator"}),"\n",(0,i.jsx)(n.p,{children:"Reference is made to the design of spring boot actuator\uff1a\nActuator abstracts the Endpoint concept to support the expansion and inject the Endpoint as needed.Health and info EndPoint are implemented in-house."}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Actuator struct {\n\tendpointRegistry map[string]Endpoint\n}\n\nfunc (act *Actuator) GetEndpoint(name string) (endpoint Endpoint, ok bool) {\n\te, ok := act.endpointRegistry[name]\n\treturn e, ok\n}\n\nfunc (act *Actuator) AddEndpoint(name string, ep Endpoint) {\n\tact.endpointRegistry[name] = ep\n}\n\n"})}),"\n",(0,i.jsx)(n.p,{children:"The request will then be distributed to the corresponding endpoint according to the path.e.g. /actuator/health/readiness will be distributed to health.Endpoint"}),"\n",(0,i.jsx)(n.h3,{id:"healthendpoint-requests-for-distribution-to-healthindicator",children:"Health.Endpoint requests for distribution to health.Indicator"}),"\n",(0,i.jsx)(n.p,{children:"Component to report health check information implements the Indicator interface, inject health.Endpoint\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"Type Indicator interface LO\n\tReport() Health\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"Health.Endpoint will distribute the request to health.Indicator"}),"\n",(0,i.jsx)(n.h3,{id:"infoendpoint-requests-for-distribution-to-infocontributor",children:"Info.Endpoint requests for distribution to info.Contributor"}),"\n",(0,i.jsx)(n.p,{children:"Components that need to report runtime information achieve Contribor interface, inject info.Endpoint\uff1a"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-go",children:"type Contributor interface {\n\tGetInfo() (info interface{}, err error)\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"info.Endpoint request for distribution to info.Contributor implementation"}),"\n",(0,i.jsx)(n.h1,{id:"detailed-design",children:"Detailed design"}),"\n",(0,i.jsx)(n.h2,{id:"scene-design",children:"Scene design"}),"\n",(0,i.jsx)(n.h3,{id:"runtime_startup",children:"runtime_startup"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SetsStarted"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(8209).A+"",width:"1050",height:"683"})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"SetUnhealth burial point"}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"Startup failed:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(5006).A+"",width:"1208",height:"958"})}),"\n",(0,i.jsx)(n.p,{children:"On Stop's\uff1a"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img.png",src:t(7018).A+"",width:"824",height:"196"})}),"\n",(0,i.jsx)(n.h3,{id:"apollo-components",children:"Apollo components"}),"\n",(0,i.jsx)(n.p,{children:"init:"}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{alt:"img_2.png",src:t(8129).A+"",width:"796",height:"304"})}),"\n",(0,i.jsx)(n.p,{children:"There is no place where the burial is required, because the runtime_startup indicator can also report unhealth if the initialization connection fails."})]})}function h(e={}){const{wrapper:n}={...(0,r.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(d,{...e})}):d(e)}},4273:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/abstract-92949c477dba508105a2ccdba58fb1e6.png"},9869:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/actuator_config-8111e323e8498ce9f34e86cc20e478bb.png"},9216:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/actuator_process-fb36501e6cc899988000e752720e85a3.png"},5006:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/img-06e2b8b036a107d6424ad61b4f46b7ca.png"},7018:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/img_1-f98f9ba94215e9a9896e449bae7d1ff7.png"},8129:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/img_2-d977bccd8c675c4ed0f93b98a4a9b10f.png"},8209:(e,n,t)=>{t.d(n,{A:()=>i});const i=t.p+"assets/images/set_started-b10157c521ff5964b83e93e94f633ac1.png"},8453:(e,n,t)=>{t.d(n,{R:()=>a,x:()=>o});var i=t(6540);const r={},s=i.createContext(r);function a(e){const n=i.useContext(s);return i.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function o(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:a(e.components),i.createElement(s.Provider,{value:n},e.children)}}}]);