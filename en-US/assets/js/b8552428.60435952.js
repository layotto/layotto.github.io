"use strict";(self.webpackChunklayotto_docusaurus=self.webpackChunklayotto_docusaurus||[]).push([[5092],{911:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>l,contentTitle:()=>r,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>c});var s=n(4848),a=n(8453);const o={},r="State API",i={id:"building_blocks/state/reference",title:"State API",description:"What is State API",source:"@site/i18n/en-US/docusaurus-plugin-content-docs/current/building_blocks/state/reference.md",sourceDirName:"building_blocks/state",slug:"/building_blocks/state/reference",permalink:"/layotto/en-US/docs/building_blocks/state/reference",draft:!1,unlisted:!1,editUrl:"https://github.com/mosn/layotto/edit/main/building_blocks/state/reference.md",tags:[],version:"current",frontMatter:{},sidebar:"mySidebar",previous:{title:"Actuator Http API",permalink:"/layotto/en-US/docs/building_blocks/actuator/"},next:{title:"Sequencer API",permalink:"/layotto/en-US/docs/building_blocks/sequencer/reference"}},l={},c=[{value:"What is State API",id:"what-is-state-api",level:2},{value:"When to use State API and what are the benefits?",id:"when-to-use-state-api-and-what-are-the-benefits",level:2},{value:"How to use State API",id:"how-to-use-state-api",level:2},{value:"Example",id:"example",level:3},{value:"Save state",id:"save-state",level:3},{value:"parameters",id:"parameters",level:4},{value:"return",id:"return",level:4},{value:"Get State",id:"get-state",level:3},{value:"Get bulk state",id:"get-bulk-state",level:3},{value:"Delete state",id:"delete-state",level:3},{value:"Delete bulk state",id:"delete-bulk-state",level:3},{value:"State transactions",id:"state-transactions",level:3}];function d(e){const t={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",li:"li",p:"p",pre:"pre",ul:"ul",...(0,a.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{id:"state-api",children:"State API"}),"\n",(0,s.jsx)(t.h2,{id:"what-is-state-api",children:"What is State API"}),"\n",(0,s.jsx)(t.p,{children:"State API is a set of APIs for adding, deleting, modifying and querying Key/Value data. Your application can use the same State API to operate different databases (or a certain storage system) with Key/Value model."}),"\n",(0,s.jsx)(t.p,{children:"API supports batch CRUD operations and supports the declaration of requirements for concurrency security and data consistency. Layotto will help you deal with complex concurrency control and data consistency issues."}),"\n",(0,s.jsx)(t.h2,{id:"when-to-use-state-api-and-what-are-the-benefits",children:"When to use State API and what are the benefits?"}),"\n",(0,s.jsx)(t.p,{children:"If your application needs to do some CRUD operations on Key/Value storage, then using the State API is a good choice. It has the following benefits:"}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Multi (cloud) environment deployment: the same application code can be deployed in different environments"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"A neutral API can help your application decouple from storage vendors and cloud vendors, and be able to deploy on different clouds without changing the code."}),"\n",(0,s.jsxs)(t.ul,{children:["\n",(0,s.jsx)(t.li,{children:"Multi-language reuse middleware: the same DB (and data middleware) can support applications in different languages"}),"\n"]}),"\n",(0,s.jsx)(t.p,{children:"If your company has applications developed in different languages (for example, both java and python applications), then the traditional approach is to develop a set of data middleware SDKs for each language(used for routing,traffic control or some other custom purposes)."}),"\n",(0,s.jsx)(t.p,{children:"Using State API can help you avoid the trouble of maintaining multilingual SDKs. Applications in different languages can interact with Layotto using the same set of grpc API."}),"\n",(0,s.jsx)(t.h2,{id:"how-to-use-state-api",children:"How to use State API"}),"\n",(0,s.jsxs)(t.p,{children:["You can call the State API through grpc. The API is defined in ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"runtime.proto"}),"."]}),"\n",(0,s.jsxs)(t.p,{children:["The component needs to be configured before use. For detailed configuration items, see ",(0,s.jsx)(t.a,{href:"/layotto/en-US/docs/component_specs/state/common",children:"State Component Document"})]}),"\n",(0,s.jsx)(t.h3,{id:"example",children:"Example"}),"\n",(0,s.jsxs)(t.p,{children:["Layotto client sdk encapsulates the logic of grpc call. For examples of using sdk to call State API, please refer to ",(0,s.jsx)(t.a,{href:"/layotto/en-US/docs/start/state/start",children:"Quick Start: Use State API"})]}),"\n",(0,s.jsx)(t.h3,{id:"save-state",children:"Save state"}),"\n",(0,s.jsx)(t.p,{children:"Used to save a batch of status data"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Saves an array of state objects\n  rpc SaveState(SaveStateRequest) returns (google.protobuf.Empty) {}\n"})}),"\n",(0,s.jsx)(t.h4,{id:"parameters",children:"parameters"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"\n// SaveStateRequest is the message to save multiple states into state store.\nmessage SaveStateRequest {\n  // Required. The name of state store.\n  string store_name = 1;\n\n  // Required. The array of the state key values.\n  repeated StateItem states = 2;\n}\n\n// StateItem represents state key, value, and additional options to save state.\nmessage StateItem {\n  // Required. The state key\n  string key = 1;\n\n  // Required. The state data for key\n  bytes value = 2;\n\n  // (optional) The entity tag which represents the specific version of data.\n  // The exact ETag format is defined by the corresponding data store. Layotto runtime only treats ETags as opaque strings. \n  Etag etag = 3;\n\n  // (optional) additional key-value pairs to be passed to the state store.\n  map<string, string> metadata = 4;\n\n  // (optional) Options for concurrency and consistency to save the state.\n  StateOptions options = 5;\n}\n\n// Etag represents a state item version\nmessage Etag {\n  // value sets the etag value\n  string value = 1;\n}\n\n\n// StateOptions configures concurrency and consistency for state operations\nmessage StateOptions {\n  // Enum describing the supported concurrency for state.\n  // The API server uses Optimized Concurrency Control (OCC) with ETags.\n  // When an ETag is associated with an save or delete request, the store shall allow the update only if the attached ETag matches with the latest ETag in the database.\n  // But when ETag is missing in the write requests, the state store shall handle the requests in the specified strategy(e.g. a last-write-wins fashion).\n  enum StateConcurrency {\n    CONCURRENCY_UNSPECIFIED = 0;\n    // First write wins\n    CONCURRENCY_FIRST_WRITE = 1;\n    // Last write wins\n    CONCURRENCY_LAST_WRITE = 2;\n  }\n\n  // Enum describing the supported consistency for state.\n  enum StateConsistency {\n    CONSISTENCY_UNSPECIFIED = 0;\n    //  The API server assumes data stores are eventually consistent by default.A state store should:\n    //\n    // - For read requests, the state store can return data from any of the replicas\n    // - For write request, the state store should asynchronously replicate updates to configured quorum after acknowledging the update request.\n    CONSISTENCY_EVENTUAL = 1;\n\n    // When a strong consistency hint is attached, a state store should:\n    //\n    // - For read requests, the state store should return the most up-to-date data consistently across replicas.\n    // - For write/delete requests, the state store should synchronisely replicate updated data to configured quorum before completing the write request.\n    CONSISTENCY_STRONG = 2;\n  }\n\n  StateConcurrency concurrency = 1;\n  StateConsistency consistency = 2;\n}\n"})}),"\n",(0,s.jsx)(t.h4,{id:"return",children:"return"}),"\n",(0,s.jsx)(t.p,{children:(0,s.jsx)(t.code,{children:"google.protobuf.Empty"})}),"\n",(0,s.jsx)(t.h3,{id:"get-state",children:"Get State"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Gets the state for a specific key.\n  rpc GetState(GetStateRequest) returns (GetStateResponse) {}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To avoid inconsistencies between this document and the code, please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"the newest proto file"})," for detailed input parameters and return values."]}),"\n",(0,s.jsx)(t.h3,{id:"get-bulk-state",children:"Get bulk state"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Gets a bulk of state items for a list of keys\n  rpc GetBulkState(GetBulkStateRequest) returns (GetBulkStateResponse) {}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To avoid inconsistencies between this document and the code, please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"the newest proto file"})," for detailed input parameters and return values."]}),"\n",(0,s.jsx)(t.h3,{id:"delete-state",children:"Delete state"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Deletes the state for a specific key.\n  rpc DeleteState(DeleteStateRequest) returns (google.protobuf.Empty) {}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To avoid inconsistencies between this document and the code, please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"the newest proto file"})," for detailed input parameters and return values."]}),"\n",(0,s.jsx)(t.h3,{id:"delete-bulk-state",children:"Delete bulk state"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Deletes a bulk of state items for a list of keys\n  rpc DeleteBulkState(DeleteBulkStateRequest) returns (google.protobuf.Empty) {}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To avoid inconsistencies between this document and the code, please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"the newest proto file"})," for detailed input parameters and return values."]}),"\n",(0,s.jsx)(t.h3,{id:"state-transactions",children:"State transactions"}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-protobuf",children:"  // Executes transactions for a specified store\n  rpc ExecuteStateTransaction(ExecuteStateTransactionRequest) returns (google.protobuf.Empty) {}\n"})}),"\n",(0,s.jsxs)(t.p,{children:["To avoid inconsistencies between this document and the code, please refer to ",(0,s.jsx)(t.a,{href:"https://github.com/mosn/layotto/blob/main/spec/proto/runtime/v1/runtime.proto",children:"the newest proto file"})," for detailed input parameters and return values."]})]})}function u(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,s.jsx)(t,{...e,children:(0,s.jsx)(d,{...e})}):d(e)}},8453:(e,t,n)=>{n.d(t,{R:()=>r,x:()=>i});var s=n(6540);const a={},o=s.createContext(a);function r(e){const t=s.useContext(o);return s.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function i(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(a):e.components||a:r(e.components),s.createElement(o.Provider,{value:t},e.children)}}}]);